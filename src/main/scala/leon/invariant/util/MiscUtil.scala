package leon
package invariant.util

import purescala.Common._
import purescala.Definitions._
import purescala.Trees._
import purescala.TreeOps._
import purescala.Extractors._
import purescala.TypeTrees._
import scala.collection.mutable.{ Set => MutableSet }
import scala.collection.immutable.Stack
import java.io._
import scala.collection.mutable.{Set => MutableSet}
import java.io._
import solvers.z3._
import solvers._
import invariant.engine._
import invariant.factories._
import invariant.structure._
import leon.smtlib._
import _root_.smtlib.sexpr.SExprs._
import _root_.smtlib._
import _root_.smtlib.Commands.Assert

/**
 * Some utils that need not be a part of 
 * mainstream utilities
 */
object MiscUtil {
  
  val zero = IntLiteral(0)
  val one = IntLiteral(1)
  val tru = BooleanLiteral(true)
  
  
  def toBracelogicSMTLIB(inExpr: Expr, filename: String, 
      theory: String, ctx: LeonContext, pgm: Program,
      useBitvectors : Boolean = false, 
      bitvecSize :Int = 32)  = {
    //replace all reals by integers
    val realToInt = new RealToInt()
    val intExpr = realToInt.mapRealToInt(inExpr)
    
    //dump to an smtlib file
    val writer = new PrintWriter(filename)
    val target = new SMTLIBStreamWriter(writer, ctx)   
    target.assertCnstr(intExpr)
        
    /*val smtlibText = List(      
      SComment("Automatically Generated by Orb (http://lara.epfl.ch/w/rbound)"),      
      SList(List(SSymbol("set-logic"), SSymbol("ALL_SUPPORTED"))),
      sexpr
    ).map(_.toString()).mkString("\n")*/
             
    writer.println()    
    writer.flush()
    writer.close()
  }

}